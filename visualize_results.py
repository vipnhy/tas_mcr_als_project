#!/usr/bin/env python3
"""
TAS MCR-ALS 结果数据可视化工具

此工具将全局拟合的结果可视化为图文解释报告，
包括浓度剖面、谱图、残差分析和拟合质量评估。
"""

import os
import sys
import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from pathlib import Path
import json
from typing import Dict, List, Tuple, Optional


class TASResultsVisualizer:
    """TAS分析结果可视化器"""

    def __init__(self, output_dir: str, language: str = 'zh'):
        """
        初始化可视化器

        Args:
            output_dir: 输出目录路径
            language: 语言选择 ('zh' 或 'en')
        """
        self.output_dir = Path(output_dir)
        self.language = language
        self.data = {}
        self.fit_params = {}
        self.metadata = {}

        # 设置语言标签
        self._setup_language_labels()

        # 检查输出目录是否存在
        if not self.output_dir.exists():
            raise FileNotFoundError(f"输出目录不存在: {output_dir}")

        # 加载数据
        self._load_data()

    def _setup_language_labels(self):
        """设置语言标签"""
        if self.language == 'zh':
            self.labels = {
                'title': 'TAS MCR-ALS 全局拟合结果可视化报告',
                'overview': '概述',
                'interpretation': '结果解释',
                'visualization': '可视化图表',
                'fit_quality': '拟合质量评估',
                'parameters': '参数分析',
                'data_summary': '数据摘要',
                'usage': '使用说明',
                'concentration_profile': '全局拟合浓度剖面',
                'spectra': '全局拟合纯谱',
                'residuals': '拟合残差',
                'fit_quality_title': '拟合质量指标',
                'parameters_title': '拟合参数',
                'correlations': '参数相关性',
                'time': '时间',
                'concentration': '浓度',
                'wavelength': '波长',
                'absorbance': '吸光度',
                'data_points': '数据点',
                'residual': '残差',
                'value': '值',
                'parameter': '参数',
                'uncertainty': '不确定度',
                'initial_value': '初始值',
                'rows_cols': '行 × 列',
                'data_type': '数据类型',
                'output_dir': '输出目录',
                'analysis_time': '分析时间',
                'comprehensive_plot': '全局拟合结果综合图表，包含浓度剖面、谱图、残差和质量指标',
                'auto_generated': '本报告由TAS分析工具自动生成。如需重新生成，请运行：',
                'unknown': '未知'
            }
        else:  # English
            self.labels = {
                'title': 'TAS MCR-ALS Global Fit Results Visualization Report',
                'overview': 'Overview',
                'interpretation': 'Results Interpretation',
                'visualization': 'Visualization Charts',
                'fit_quality': 'Fit Quality Assessment',
                'parameters': 'Parameter Analysis',
                'data_summary': 'Data Summary',
                'usage': 'Usage Instructions',
                'concentration_profile': 'Global Fit Concentration Profiles',
                'spectra': 'Global Fit Pure Spectra',
                'residuals': 'Fit Residuals',
                'fit_quality_title': 'Fit Quality Metrics',
                'parameters_title': 'Fit Parameters',
                'correlations': 'Parameter Correlations',
                'time': 'Time',
                'concentration': 'Concentration',
                'wavelength': 'Wavelength',
                'absorbance': 'Absorbance',
                'data_points': 'Data Points',
                'residual': 'Residual',
                'value': 'Value',
                'parameter': 'Parameter',
                'uncertainty': 'Uncertainty',
                'initial_value': 'Initial Value',
                'rows_cols': 'rows × columns',
                'data_type': 'Data Type',
                'output_dir': 'Output Directory',
                'analysis_time': 'Analysis Time',
                'comprehensive_plot': 'Comprehensive global fit results chart, including concentration profiles, spectra, residuals, and quality metrics',
                'auto_generated': 'This report is automatically generated by TAS analysis tools. To regenerate, run:',
                'unknown': 'Unknown'
            }

    def _load_data(self):
        """加载所有输出数据文件"""
        try:
            # 加载浓度剖面
            conc_file = self.output_dir / "concentration_global_fit.csv"
            if conc_file.exists():
                self.data['concentration'] = pd.read_csv(conc_file, comment='#')

            # 加载谱数据
            spectra_file = self.output_dir / "spectra_global_fit.csv"
            if spectra_file.exists():
                self.data['spectra'] = pd.read_csv(spectra_file, comment='#')

            # 加载残差
            residual_file = self.output_dir / "residuals.csv"
            if residual_file.exists():
                self.data['residuals'] = pd.read_csv(residual_file, header=None)

            # 加载拟合报告
            fit_report_file = self.output_dir / "fit_report.txt"
            if fit_report_file.exists():
                self._parse_fit_report(fit_report_file)

            # 加载全局拟合摘要
            summary_file = self.output_dir / "global_fit_summary.json"
            if summary_file.exists():
                with open(summary_file, 'r') as f:
                    self.metadata = json.load(f)

        except Exception as e:
            print(f"加载数据时出错: {e}")
            raise

    def _parse_fit_report(self, report_file: Path):
        """解析拟合报告文件"""
        with open(report_file, 'r') as f:
            content = f.read()

        # 提取拟合统计
        self.fit_params['statistics'] = {}
        if 'chi-square' in content:
            # 简单的文本解析，这里可以改进为更健壮的解析
            lines = content.split('\n')
            in_stats = False
            in_vars = False

            for line in lines:
                line = line.strip()
                if line.startswith('[[Fit Statistics]]'):
                    in_stats = True
                    in_vars = False
                    continue
                elif line.startswith('[[Variables]]'):
                    in_stats = False
                    in_vars = True
                    self.fit_params['variables'] = {}
                    continue
                elif line.startswith('[[Correlations]]'):
                    in_stats = False
                    in_vars = False
                    continue

                if in_stats and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip().replace('# ', '')
                    try:
                        # 尝试转换为数值
                        if 'e' in value or '.' in value:
                            value = float(value.split()[0])
                        else:
                            value = float(value.split()[0])
                    except:
                        value = value.strip()
                    self.fit_params['statistics'][key] = value

                elif in_vars and ':' in line and not line.startswith('#'):
                    parts = line.split(':')
                    if len(parts) >= 2:
                        var_name = parts[0].strip()
                        var_info = ':'.join(parts[1:]).strip()
                        self.fit_params['variables'][var_name] = var_info

    def generate_visualization_report(self, output_file: str = None):
        """
        生成完整的可视化报告

        Args:
            output_file: 输出文件路径，如果为None则使用默认名称
        """
        if output_file is None:
            output_file = self.output_dir / "visualization_report.html"

        # 创建图表
        self._create_plots()

        # 生成HTML报告
        self._generate_html_report(output_file)

        print(f"可视化报告已生成: {output_file}")

    def _create_plots(self):
        """创建所有图表"""
        # 设置matplotlib参数和中文字体
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 10

        # 设置中文字体支持
        if self.language == 'zh':
            plt.rcParams['font.sans-serif'] = ['SimHei', 'DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
            plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

        # 创建子图布局
        fig = plt.figure(constrained_layout=True, figsize=(15, 10))
        gs = gridspec.GridSpec(3, 3, figure=fig)

        # 1. 浓度剖面图
        ax1 = fig.add_subplot(gs[0, :2])
        self._plot_concentration_profiles(ax1)

        # 2. 谱图
        ax2 = fig.add_subplot(gs[1, :2])
        self._plot_spectra(ax2)

        # 3. 残差图
        ax3 = fig.add_subplot(gs[2, :2])
        self._plot_residuals(ax3)

        # 4. 拟合质量指标
        ax4 = fig.add_subplot(gs[0, 2])
        self._plot_fit_quality(ax4)

        # 5. 参数分布
        ax5 = fig.add_subplot(gs[1, 2])
        self._plot_parameters(ax5)

        # 6. 相关性矩阵
        ax6 = fig.add_subplot(gs[2, 2])
        self._plot_correlations(ax6)

        plt.tight_layout()
        plt.savefig(self.output_dir / "visualization_plots.png", dpi=300, bbox_inches='tight')
        plt.close()

    def _plot_concentration_profiles(self, ax):
        """绘制浓度剖面"""
        if 'concentration' not in self.data:
            unavailable_text = '浓度数据不可用' if self.language == 'zh' else 'Concentration data unavailable'
            ax.text(0.5, 0.5, unavailable_text, ha='center', va='center', transform=ax.transAxes)
            return

        df = self.data['concentration']
        time = np.arange(len(df))  # 假设时间是索引

        for col in df.columns:
            ax.plot(time, df[col], label=col, linewidth=2)

        ax.set_xlabel(self.labels['time'])
        ax.set_ylabel(self.labels['concentration'])
        ax.set_title(self.labels['concentration_profile'])
        ax.legend()
        ax.grid(True, alpha=0.3)

    def _plot_spectra(self, ax):
        """绘制谱图"""
        if 'spectra' not in self.data:
            unavailable_text = '谱数据不可用' if self.language == 'zh' else 'Spectral data unavailable'
            ax.text(0.5, 0.5, unavailable_text, ha='center', va='center', transform=ax.transAxes)
            return

        df = self.data['spectra']
        wavelengths = np.arange(len(df))  # 假设波长是索引

        for col in df.columns:
            ax.plot(wavelengths, df[col], label=col, linewidth=2)

        ax.set_xlabel(self.labels['wavelength'])
        ax.set_ylabel(self.labels['absorbance'])
        ax.set_title(self.labels['spectra'])
        ax.legend()
        ax.grid(True, alpha=0.3)

    def _plot_residuals(self, ax):
        """绘制残差"""
        if 'residuals' not in self.data:
            unavailable_text = '残差数据不可用' if self.language == 'zh' else 'Residual data unavailable'
            ax.text(0.5, 0.5, unavailable_text, ha='center', va='center', transform=ax.transAxes)
            return

        residuals = self.data['residuals'].values.flatten()
        ax.plot(residuals, 'b-', alpha=0.7, linewidth=1)
        ax.axhline(y=0, color='r', linestyle='--', alpha=0.5)

        ax.set_xlabel(self.labels['data_points'])
        ax.set_ylabel(self.labels['residual'])
        ax.set_title(self.labels['residuals'])
        ax.grid(True, alpha=0.3)

    def _plot_fit_quality(self, ax):
        """绘制拟合质量指标"""
        if 'statistics' not in self.fit_params:
            unavailable_text = '拟合统计不可用' if self.language == 'zh' else 'Fit statistics unavailable'
            ax.text(0.5, 0.5, unavailable_text, ha='center', va='center', transform=ax.transAxes)
            return

        stats = self.fit_params['statistics']
        labels = []
        values = []

        # 选择关键指标
        key_metrics = ['chi-square', 'reduced chi-square', 'Akaike info crit', 'Bayesian info crit']
        for metric in key_metrics:
            if metric in stats:
                labels.append(metric.replace(' ', '\n'))
                values.append(stats[metric])

        if values:
            bars = ax.bar(range(len(labels)), values)
            ax.set_xticks(range(len(labels)))
            ax.set_xticklabels(labels, rotation=45, ha='right')
            ax.set_title(self.labels['fit_quality_title'])
            ax.set_ylabel(self.labels['value'])

            # 添加数值标签
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height,
                       '.2e' if isinstance(value, float) else str(value),
                       ha='center', va='bottom', fontsize=8)

    def _plot_parameters(self, ax):
        """绘制参数信息"""
        if 'variables' not in self.fit_params:
            unavailable_text = '参数信息不可用' if self.language == 'zh' else 'Parameter information unavailable'
            ax.text(0.5, 0.5, unavailable_text, ha='center', va='center', transform=ax.transAxes)
            return

        variables = self.fit_params['variables']
        param_names = list(variables.keys())
        param_values = []

        for var_info in variables.values():
            # 提取参数值
            try:
                value = float(var_info.split()[0])
                param_values.append(value)
            except:
                param_values.append(0)

        if param_values:
            ax.bar(param_names, param_values)
            ax.set_title(self.labels['parameters_title'])
            ax.set_ylabel(self.labels['value'])
            ax.tick_params(axis='x', rotation=45)

    def _plot_correlations(self, ax):
        """绘制相关性矩阵占位符"""
        placeholder_text = '相关性矩阵\n(待实现)' if self.language == 'zh' else 'Correlation Matrix\n(To be implemented)'
        ax.text(0.5, 0.5, placeholder_text, ha='center', va='center', transform=ax.transAxes)
        ax.set_title(self.labels['correlations'])

    def _generate_html_report(self, output_file: Path):
        """生成HTML报告"""
        # 生成详细的文本解释
        interpretation = self._generate_interpretation()

        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>{self.labels['title']}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
        h1, h2, h3 {{ color: #333; }}
        .section {{ margin-bottom: 30px; }}
        .metric {{ background: #f5f5f5; padding: 10px; border-radius: 5px; margin: 10px 0; }}
        .plot {{ text-align: center; margin: 20px 0; }}
        img {{ max-width: 100%; height: auto; border: 1px solid #ddd; }}
        .interpretation {{ background: #e8f4f8; padding: 15px; border-left: 4px solid #4a90e2; margin: 15px 0; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin: 10px 0; }}
        table {{ border-collapse: collapse; width: 100%; margin: 15px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <h1>{self.labels['title']}</h1>

    <div class="section">
        <h2>{self.labels['overview']}</h2>
        <p>{'本报告展示了TAS（Transient Absorption Spectroscopy）分析中MCR-ALS（Multivariate Curve Resolution - Alternating Least Squares）与全局拟合的综合结果。' if self.language == 'zh' else 'This report presents the comprehensive results of TAS (Transient Absorption Spectroscopy) analysis combining MCR-ALS (Multivariate Curve Resolution - Alternating Least Squares) with global fitting.'}</p>
        <p><strong>{self.labels['output_dir']}:</strong> {self.output_dir}</p>
        <p><strong>{self.labels['analysis_time']}:</strong> {self._get_analysis_timestamp()}</p>
    </div>

    <div class="section">
        <h2>{self.labels['interpretation']}</h2>
        <div class="interpretation">
            {interpretation}
        </div>
    </div>

    <div class="section">
        <h2>{self.labels['visualization']}</h2>
        <div class="plot">
            <img src="visualization_plots.png" alt="{self.labels['visualization']}">
            <p><em>{'图1: ' if self.language == 'zh' else 'Fig 1: '}{self.labels['comprehensive_plot']}</em></p>
        </div>
    </div>

    <div class="section">
        <h2>{self.labels['fit_quality']}</h2>
        {self._generate_fit_quality_html()}
    </div>

    <div class="section">
        <h2>{self.labels['parameters']}</h2>
        {self._generate_parameters_html()}
    </div>

    <div class="section">
        <h2>{self.labels['data_summary']}</h2>
        {self._generate_data_summary_html()}
    </div>

    <div class="section">
        <h2>{self.labels['usage']}</h2>
        <p>{self.labels['auto_generated']}</p>
        <pre><code>python visualize_results.py "{self.output_dir}"</code></pre>
    </div>
</body>
</html>
        """

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)

    def _generate_interpretation(self) -> str:
        """生成详细的结果解释"""
        interpretation = ""

        # 基本信息
        if 'statistics' in self.fit_params:
            stats = self.fit_params['statistics']
            chi2 = stats.get('chi-square', 0)
            red_chi2 = stats.get('reduced chi-square', 0)

            if self.language == 'zh':
                interpretation += "<h3>拟合质量概述</h3>"
                interpretation += f"<p>卡方值 (χ²) = {chi2:.6f}，约简卡方值 = {red_chi2:.2e}。</p>"

                if red_chi2 < 1e-6:
                    interpretation += "<p>✓ 拟合质量优秀，残差很小。</p>"
                elif red_chi2 < 1e-3:
                    interpretation += "<p>✓ 拟合质量良好。</p>"
                else:
                    interpretation += "<p>⚠ 拟合质量一般，可能需要调整模型参数。</p>"
            else:
                interpretation += "<h3>Fit Quality Overview</h3>"
                interpretation += f"<p>Chi-square value (χ²) = {chi2:.6f}, Reduced chi-square = {red_chi2:.2e}.</p>"

                if red_chi2 < 1e-6:
                    interpretation += "<p>✓ Excellent fit quality with very small residuals.</p>"
                elif red_chi2 < 1e-3:
                    interpretation += "<p>✓ Good fit quality.</p>"
                else:
                    interpretation += "<p>⚠ Fair fit quality, model parameters may need adjustment.</p>"

        # 参数分析
        if 'variables' in self.fit_params:
            variables = self.fit_params['variables']
            if self.language == 'zh':
                interpretation += "<h3>动力学参数分析</h3>"

                for name, info in variables.items():
                    if 'k_' in name:  # 速率常数
                        try:
                            value = float(info.split()[0])
                            error = float(info.split()[2].replace('(', '').replace('%)', ''))
                            interpretation += f"<p><strong>{name}</strong> = {value:.6f} ± {error:.1f}%</p>"
                        except:
                            interpretation += f"<p><strong>{name}</strong>: {info}</p>"

                interpretation += "<p>这些参数代表了不同组分的反应速率常数。</p>"
            else:
                interpretation += "<h3>Kinetic Parameter Analysis</h3>"

                for name, info in variables.items():
                    if 'k_' in name:  # 速率常数
                        try:
                            value = float(info.split()[0])
                            error = float(info.split()[2].replace('(', '').replace('%)', ''))
                            interpretation += f"<p><strong>{name}</strong> = {value:.6f} ± {error:.1f}%</p>"
                        except:
                            interpretation += f"<p><strong>{name}</strong>: {info}</p>"

                interpretation += "<p>These parameters represent the reaction rate constants of different components.</p>"

        # 数据维度
        if self.language == 'zh':
            if 'concentration' in self.data:
                conc_df = self.data['concentration']
                interpretation += "<h3>数据维度</h3>"
                interpretation += f"<p>浓度剖面: {conc_df.shape[0]} 个时间点 × {conc_df.shape[1]} 个组分</p>"

            if 'spectra' in self.data:
                spec_df = self.data['spectra']
                interpretation += f"<p>谱数据: {spec_df.shape[0]} 个波长点 × {spec_df.shape[1]} 个组分</p>"
        else:
            if 'concentration' in self.data:
                conc_df = self.data['concentration']
                interpretation += "<h3>Data Dimensions</h3>"
                interpretation += f"<p>Concentration profiles: {conc_df.shape[0]} time points × {conc_df.shape[1]} components</p>"

            if 'spectra' in self.data:
                spec_df = self.data['spectra']
                interpretation += f"<p>Spectral data: {spec_df.shape[0]} wavelength points × {spec_df.shape[1]} components</p>"

        # 建议
        if self.language == 'zh':
            interpretation += "<h3>分析建议</h3>"
            interpretation += "<ul>"
            interpretation += "<li>检查残差图是否随机分布（无系统误差）</li>"
            interpretation += "<li>验证谱图是否具有合理的形状和特征</li>"
            interpretation += "<li>比较不同尝试的拟合结果以选择最佳模型</li>"
            interpretation += "<li>考虑物理意义解释动力学参数</li>"
            interpretation += "</ul>"
        else:
            interpretation += "<h3>Analysis Recommendations</h3>"
            interpretation += "<ul>"
            interpretation += "<li>Check if residual plots show random distribution (no systematic errors)</li>"
            interpretation += "<li>Verify that spectra have reasonable shapes and features</li>"
            interpretation += "<li>Compare fitting results from different attempts to select the best model</li>"
            interpretation += "<li>Consider physical interpretation of kinetic parameters</li>"
            interpretation += "</ul>"

        return interpretation

    def _get_analysis_timestamp(self) -> str:
        """获取分析时间戳"""
        try:
            # 从目录名提取时间戳
            parts = str(self.output_dir).split('_')
            for part in parts:
                if len(part) == 8 and part.isdigit():  # 日期格式 YYYYMMDD
                    return f"{part[:4]}-{part[4:6]}-{part[6:]}"
        except:
            pass
        return self.labels['unknown']

    def _generate_fit_quality_html(self) -> str:
        """生成拟合质量HTML"""
        if 'statistics' not in self.fit_params:
            unavailable_text = "拟合统计信息不可用" if self.language == 'zh' else "Fit statistics unavailable"
            return f"<p>{unavailable_text}</p>"

        html = "<div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;'>"
        for key, value in self.fit_params['statistics'].items():
            html += f'<div class="metric"><strong>{key}:</strong> {value}</div>'
        html += "</div>"
        return html

    def _generate_parameters_html(self) -> str:
        """生成参数HTML"""
        if 'variables' not in self.fit_params:
            unavailable_text = "参数信息不可用" if self.language == 'zh' else "Parameter information unavailable"
            return f"<p>{unavailable_text}</p>"

        html = "<table border='1' style='border-collapse: collapse; width: 100%;'>"
        html += f"<tr><th>{self.labels['parameter']}</th><th>{self.labels['value']}</th><th>{self.labels['uncertainty']}</th><th>{self.labels['initial_value']}</th></tr>"

        for name, info in self.fit_params['variables'].items():
            parts = info.split()
            if len(parts) >= 3:
                value = parts[0]
                uncertainty = parts[2] if len(parts) > 2 else "N/A"
                init_part = "N/A"
                if "init" in info:
                    init_str = info.split("init = ")[-1].rstrip(")")
                    init_part = init_str
                html += f"<tr><td>{name}</td><td>{value}</td><td>{uncertainty}</td><td>{init_part}</td></tr>"
            else:
                html += f"<tr><td>{name}</td><td>{info}</td><td>N/A</td><td>N/A</td></tr>"

        html += "</table>"
        return html

    def _generate_data_summary_html(self) -> str:
        """生成数据摘要HTML"""
        html = "<div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;'>"

        for key, df in self.data.items():
            if isinstance(df, pd.DataFrame):
                rows_cols = f"{df.shape[0]} {self.labels['rows_cols']} {df.shape[1]}"
                data_type = f"{self.labels['data_type']}: {df.dtypes.iloc[0] if len(df.dtypes) > 0 else 'Mixed'}"
                html += f"""
                <div class="metric">
                    <strong>{key.title()}</strong><br>
                    {rows_cols}<br>
                    <small>{data_type}</small>
                </div>"""
            else:
                html += f"""
                <div class="metric">
                    <strong>{key.title()}</strong><br>
                    {type(df).__name__}
                </div>"""

        html += "</div>"
        return html


def main():
    """主函数"""
    parser = argparse.ArgumentParser(description='TAS MCR-ALS结果可视化工具')
    parser.add_argument('output_dir', help='全局拟合输出目录路径')
    parser.add_argument('--output', '-o', help='输出报告文件路径', default=None)
    parser.add_argument('--language', '-l', choices=['zh', 'en'], default='zh',
                       help='报告语言 (zh: 中文, en: 英文, 默认: zh)')

    args = parser.parse_args()

    try:
        visualizer = TASResultsVisualizer(args.output_dir, language=args.language)
        visualizer.generate_visualization_report(args.output)
        success_msg = "可视化报告生成完成！" if args.language == 'zh' else "Visualization report generated successfully!"
        print(success_msg)

    except Exception as e:
        print(f"错误: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()